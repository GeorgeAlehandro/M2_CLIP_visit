?knn.raw2adj
?knn.adj.raw
?knn.raw2adj
?knn.adj2spadjsim
?knn.adj2spadjsim
?rm
E(G
)
E(G)$weight
E(G)$weight[-1]
E(G)$weight
E(G)$weight[-tv1$origin$HSC_hitting_time]
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time,E(G)$weight[-tv1$origin$HSC_hitting_time])
E(G)$weight[-tv1$origin$HSC_hitting_time]
#derahmap <- deRahmMap1f(get_boundary_matrix(tv1), tv1$data)
AllWeightsExceptOrigin <- Matrix::Diagonal(E(G)$weight[-tv1$origin$HSC_hitting_time])
E(G)$weight[-tv1$origin$HSC_hitting_time]
#derahmap <- deRahmMap1f(get_boundary_matrix(tv1), tv1$data)
AllWeightsExceptOrigin <- Matrix::Diagonal(x=E(G)$weight[-tv1$origin$HSC_hitting_time])
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time,AllWeightsExceptOrigin)
AllWeightsExceptOrigin
dim(AllWeightsExceptOrigin)
dim(D0)
dim(transition.matrix())
dim(transition_matrix)
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
AllWeightsExceptOrigin
E(G)$weight
class(E(G)$weight)
typeof(E(G)$weight)
E(G)
class(E(G))
D0<-Matrix::Diagonal(x=rowSums(transition_matrix))
D1<-Matrix::Diagonal(x=E(G)$weight)
dim(D0)
dim(D1)
typeof(E(G))
View(E(G))
summary(E(G))
table(E(G))
E(G)
E(G)$weights
View(G)
G[[1]][[1]]
G[[90]][[1]]
E(G)
type(G)
G
class(G)
G$weight
adj_matrix <- get.adjacency(G)
# Multiply the adjacency matrix by the edge weights
weighted_adj_matrix <- adj_matrix * E(G)$weight
E(G)$weight
length(E(G)$weight)
adj_matrix
length(adj_matrix)
get.adjacency(G)\
get.adjacency(G)
get.adjacency(G) == A
all(get.adjacency(G) == A)
get.adjacency(G)
E(G)$weight
get.adjacency(G)
get.adjacency(G) == 1
sum(adj_matrix)
E(G)$weight
sum(adj_matrix)
sum(A)
A
adj_matrix
adj_matrix * E(G)$weight
adj_matrix <- as_adjacency_matrix(g)
adj_matrix <- as_adjacency_matrix(G)
adj_matrix
E(G)$weight
adj_matrix$weight
adj_matrix * E(G)$weight
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != ".")
adj_matrix
as_data_frame(adj_matrix)
as_tibble(adj_matrix)
as_matrix(adj_matrix)
is.na(adj_matrix)
adj_matrix[!is.na(adj_matrix)]
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
indices
# Multiply the non-"." entries by their weights
adj_matrix[indices] <- adj_matrix[indices] * E(G)[indices]
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
adj_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
adj_matrix[indices]
adj_matrix[indices]
indices
adj_matrix
# Multiply the non-"." entries by their weights
adj_matrix[indices] <- adj_matrix * E(G)$weight[indices]
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
indices
adj_matrix <- get.adjacency(G)
adj_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
indices
adj_matrix * E(G)$weight[indices]
adj_matrix[indices] * E(G)$weight[indices]
adj_matrix[indices]
adj_matrix <- get.adjacency(G)
adj_matrix
adj_matrix[1] <- 1
adj_matrix
adj_matrix[1] <- 3
adj_matrix
adj_matrix <- get.adjacency(G)
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
adj_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
adj_matrix
dim(adj_matrix)
adj_matrix <- get.adjacency(G)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
adj_matrix <- get.adjacency(G)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
# Kick out the weights of tv1
weighted_matrix <- weighted_matrix[-tv1$origin$HSC_hitting_time]
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time, weighted_matrix)
dim(weighted_matrix)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
dim(weighted_matrix)
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
# Kick out the weights of tv1
weighted_matrix <- weighted_matrix[-tv1$origin$HSC_hitting_time]
dim(weighted_matrix)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
weighted_matrix
weighted_matrix[-1]
adj_matrix <- get.adjacency(G)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
unlabeled <- which(!(1:nrow(L) %in% tv1$origin$HSC_hitting_time))
unlabeled <- which(!(1:nrow(weighted_matrix) %in% tv1$origin$HSC_hitting_time))
weighted_matrix <- weighted_matrix[unlabeled, unlabeled]
weighted_matrix
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time, weighted_matrix)
adj_matrix[indices] * E(G)$weight[indices]
View( adj_matrix[indices] * E(G)$weight[indices])
adj_matrix <- get.adjacency(G)
# Fetch the weighted matrix
weighted_matrix <- adj_matrix
weighted_matrix
# Find the indices of the non-"." entries in the matrix
indices <- which(adj_matrix != 0)
# Multiply the non-"." entries by their weights
weighted_matrix[indices] <- adj_matrix[indices] * E(G)$weight[indices]
weighted_matrix
max(indices)
E(G)$weight
sum(adj_matrix)
G
E(G)$weight
deRahmMap1f
velocity<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
B<-BB[[1]]
dim(X)
dim(V)
VD<-deRahmMap1f(B = B,X = X,V = V)
head(VD)
length(VD)
dim(B)
A<-t(B)
D0
D0^-1
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
laplacian_result-Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
laplacian_result$Lap-Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
sum(laplacian_result$Lap-Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time])
A<-t(B)
Astar<-D0%*%B%*%D1
right_hand <- Astar%*%VD
?solve
alpha <- solve(left_hand, right_hand)
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
right_hand <- Astar%*%VD[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
dim(right_hand)
dim(left_hand)
dim(Astar)
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
alpha
max(alpha)
tv1$pseudotime$new_pseudotime$res<-alpha
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
class(alpha)
tv1$pseudotime$new_pseudotime$res<-as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny(tv1)
tv1$pseudotime$new_pseudotime$res<--as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny(tv1)
save(tv1,"tv1_hemato_pseudotime_from_RNA.RDATA")
save(tv1,file="tv1_hemato_pseudotime_from_RNA.RDATA")
?deRahmMap1f
dim(tv1$KNN$IND)
Walks(tv1,N=1000,origin_name = "new_pseudotime",K = 80)
launch_shiny(tv1)
launch_shiny(tv1)
Walks(tv1,N=1000,origin_name = "new_pseudotime",K = 30)
launch_shiny(tv1)
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny(tv1)
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
boundary_matrix_tv1 <- get_boundary_matrix(tv1)
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
B<-BB[[1]]
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
A<-t(B)
Astar<-D0%*%B%*%D1
Astar
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
tv1$pseudotime$new_pseudotime$res<--as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny(tv1)
Walks(tv1,N=1000,origin_name = "new_pseudotime", 10)
launch_shiny(tv1)
Walks(tv1,N=1000,origin_name = "new_pseudotime", 90)
launch_shiny(tv1)
tv1$pseudotime$new_pseudotime$res<--as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny(tv1)
alpha
t(b)
t(B)
transition.matrix(tv1)
Astar
BB
BB
BB[[1]]
BB == BB[[1]]
xy.list
##########
transition_matrix <-transition.matrix(tv1)
G<-graph_from_adjacency_matrix(transition_matrix,weighted = TRUE,mode = "undirected")
xy.list <- split(as_edgelist(G), seq(nrow(as_edgelist(G))))
names(xy.list)<-NULL
D0<-Matrix::Diagonal(x=rowSums(transition_matrix))
D1<-Matrix::Diagonal(x=E(G)$weight)
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
flt<-c(1:nrow(tv1$data),xy.list)
cmplx<-build_boundary_CuR(flt)
BB<-complex_to_boundaryF(cmplx = cmplx)
B<-BB[[1]]
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
A<-t(B)
Astar<-D0%*%B%*%D1
Astar
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
tv1$pseudotime$new_pseudotime$res<--as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny()
launch_shiny(tv1)
laplacian_result$Lap - lap
laplacian_result$Lap - Lap
laplacian_result$Lap - Lap
Dim(Lap)
dim(Lap)
dim(laplacian_result$Lap)
laplacian_result$Lap - Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
D0
BB
la <- Matrix::Diagonal(x=rowSums(transition_matrix))
la
D0
D0
la
alpha
?solve
la
la^-1
la^2
c(1:nrow(tv1$data),xy.list)
xy.list
xy.list
source('/data/calculatingPseudotimeBasedOnVelocity.R')
##########
transition_matrix <-transition.matrix(tv1, 10)
G<-graph_from_adjacency_matrix(transition_matrix,weighted = TRUE,mode = "undirected")
listOfEdges <- split(as_edgelist(G), seq(nrow(as_edgelist(G))))
names(listOfEdges)<-NULL
#####
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
#Lap <- D0%*%boundary_matrix_tv1[[1]]%*%D1%*%t(boundary_matrix_tv1[[1]])
flt<-c(1:nrow(tv1$data),listOfEdges)
cmplx<-build_boundary_CuR(flt)
BB<-complex_to_boundaryF(cmplx = cmplx)
B<-BB[[1]]
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
laplacian_result$Lap - Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time] # ~ 0
A<-t(B)
Astar<-D0%*%B%*%D1
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
tv1$pseudotime$new_pseudotime$res<--as.numeric(alpha)
tv1$origin$new_pseudotime<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "new_pseudotime")
launch_shiny()
launch_shiny(tv1)
get_pseudotime_from_velocity <- function(tviblindi_object, nearest_neighbour_number){
transition_matrix <-transition.matrix(tviblindi_object, nearest_neighbour_number)
G<-graph_from_adjacency_matrix(transition_matrix,weighted = TRUE,mode = "undirected")
listOfEdges <- split(as_edgelist(G), seq(nrow(as_edgelist(G))))
names(listOfEdges)<-NULL
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
flt<-c(1:nrow(tv1$data),listOfEdges)
cmplx<-build_boundary_CuR(flt)
BB<-complex_to_boundaryF(cmplx = cmplx)
B<-BB[[1]]
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
laplacian_result$Lap - Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time] # ~ 0
A<-t(B)
Astar<-D0%*%B%*%D1
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
tv1$pseudotime$calculatedPseudotimeFromRNAvelocity$res<--as.numeric(alpha)
tv1$origin$calculatedPseudotimeFromRNAvelocity<-tv1$origin$HSC_hitting_time
Walks(tv1,N=1000,origin_name = "calculatedPseudotimeFromRNAvelocity")
}
t = "rrr"
a$t
a$f
a
a <- list()
a
a$r
a
get_pseudotime_from_velocity <- function(tviblindi_object, nearest_neighbour_number){
transition_matrix <-transition.matrix(tviblindi_object, nearest_neighbour_number)
G<-graph_from_adjacency_matrix(transition_matrix,weighted = TRUE,mode = "undirected")
listOfEdges <- split(as_edgelist(G), seq(nrow(as_edgelist(G))))
names(listOfEdges)<-NULL
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
flt<-c(1:nrow(tv1$data),listOfEdges)
cmplx<-build_boundary_CuR(flt)
BB<-complex_to_boundaryF(cmplx = cmplx)
B<-BB[[1]]
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
laplacian_result$Lap - Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time] # ~ 0
A<-t(B)
Astar<-D0%*%B%*%D1
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
}
get_pseudotime_from_velocity(tv1, 5)
alpha
get_pseudotime_from_velocity(tv1, 50)
alpha
return(alpha)
get_pseudotime_from_velocity <- function(tviblindi_object, nearest_neighbour_number){
transition_matrix <-transition.matrix(tviblindi_object, nearest_neighbour_number)
G<-graph_from_adjacency_matrix(transition_matrix,weighted = TRUE,mode = "undirected")
listOfEdges <- split(as_edgelist(G), seq(nrow(as_edgelist(G))))
names(listOfEdges)<-NULL
laplacian_result <- build_Laplacian_and_RHS(transition_matrix, tv1$origin$HSC_hitting_time)
flt<-c(1:nrow(tv1$data),listOfEdges)
cmplx<-build_boundary_CuR(flt)
BB<-complex_to_boundaryF(cmplx = cmplx)
B<-BB[[1]]
V<-readRDS("/data/results/Hematopoiesis/hematopoiesis_PCA_velocity.RDS")
X<-tv1$data
VD<-deRahmMap1f(B = B,X = X,V = V)
D0<-Matrix::Diagonal(x=rowSums(transition_matrix)^-1)
D1<-Matrix::Diagonal(x=E(G)$weight)
Lap<-D0%*%B%*%D1%*%t(B)
laplacian_result$Lap - Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time] # ~ 0
A<-t(B)
Astar<-D0%*%B%*%D1
right_hand <- (Astar%*%VD)[-tv1$origin$HSC_hitting_time]
left_hand <- Lap[-tv1$origin$HSC_hitting_time,-tv1$origin$HSC_hitting_time]
alpha <- solve(left_hand, right_hand)
return(alpha)
}
pseudotime_50 <- get_pseudotime_from_velocity(tv1, 50)
pseudotime_50
pseudotime_50 <- get_pseudotime_from_velocity(tv1, 50)
pseudotime_10 <- get_pseudotime_from_velocity(tv1, 10)
pseudotime_30 <- get_pseudotime_from_velocity(tv1, 30)
pseudotime_100 <- get_pseudotime_from_velocity(tv1, 100)
pseudotime_90 <- get_pseudotime_from_velocity(tv1, 90)
tv1$pseudotime$calculatedPseudotime50neighbours$res<--as.numeric(alpha)
tv1$origin$calculatedPseudotime50neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime10neighbours$res<--as.numeric(alpha)
tv1$origin$calculatedPseudotime10neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime30neighbours$res<--as.numeric(alpha)
tv1$origin$calculatedPseudotime30neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime90neighbours$res<--as.numeric(alpha)
tv1$origin$calculatedPseudotime90neighbours<-tv1$origin$HSC_hitting_time
launch_shiny(tv1)
tv1$pseudotime$calculatedPseudotime50neighbours$res<--as.numeric(pseudotime_50)
tv1$origin$calculatedPseudotime50neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime10neighbours$res<--as.numeric(pseudotime_10)
tv1$origin$calculatedPseudotime10neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime30neighbours$res<--as.numeric(pseudotime_30)
tv1$origin$calculatedPseudotime30neighbours<-tv1$origin$HSC_hitting_time
tv1$pseudotime$calculatedPseudotime90neighbours$res<--as.numeric(pseudotime_90)
tv1$origin$calculatedPseudotime90neighbours<-tv1$origin$HSC_hitting_time
launch_shiny(tv1)
pseudotime_10 == pseudotime_90
plot(pseudotime_10)
plot(pseudotime_10, pseudotime_90)
plot(pseudotime_10)
plot(pseudotime_10, pseudotime_90)
plot(pseudotime_50, pseudotime_90)
plot(pseudotime_30, pseudotime_90)
Walks(tv1,N=1000,origin_name = "calculatedPseudotime30neighbours")
launch_shiny(tv1)
?Walks.tviblindi
Walks(tv1,N=1000,origin_name = "calculatedPseudotime30neighbours")
Walks(tv1,N=1000,origin_name = "calculatedPseudotime10neighbours")
Walks(tv1,N=1000,origin_name = "calculatedPseudotime50neighbours")
Walks(tv1,N=1000,origin_name = "calculatedPseudotime90neighbours")
launch_shiny(tv1)
launch_shiny(tv1$data)
tv1$data
rownames(tv1$data) <- NULL
tv1$data
launch_shiny(tv1)
tv1$layout$`3_vaevictis`
tv1$layout$`2_umap`
tv1$layout$`1_vaevictis`
colnames(tv1$layout$`1_vaevictis`)
tv1$layout$`1_vaevictis`
tv1$layout$`3_vaevictis`
colnames(tv1$layout$`3_vaevictis`) <- NULL
rownames(tv1$layout$`3_vaevictis`) <- NULL
launch_shiny(tv1)
save(tv1,file="/data/tv1_hemato_pseudotime_from_RNA_manyneighbors.RDATA")
plot(pseudotime_30, pseudotime_90)
launch_shiny(tv1)
savehistory("/data/weekend.Rhistory")
